# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (c) 2025 - present Incudo Labs Inc.
#
# This file is part of Orion's Belt Project (https://github.com/IncudoLABS/orions-belt).
#
# Published by the IncudoLABS.
# Original author: Marko Sarunac <128757181+SaruWiz@users.noreply.github.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Script ID: OB-005

# NOTE: Avoid using 'environment' as a variable name in Ansible, as it is reserved.

---
- name: Configure Password Policies
  hosts: "{{ target_hosts }}"
  become: yes
  gather_facts: yes
  
  pre_tasks:
    - name: Validate target_hosts is provided
      fail:
        msg: |
          CRITICAL SECURITY ERROR: target_hosts variable is not set!
          
          This playbook requires explicit specification of target hosts to prevent
          accidental execution on unintended systems.
          
          Usage: ansible-playbook password_policies.yml --extra-vars "target_hosts=your_hosts"
          
          Examples:
          - target_hosts=webservers
          - target_hosts=db_servers
          - target_hosts=192.168.1.10
          - target_hosts=server1,server2,server3
      when: target_hosts is not defined or target_hosts == ""
    
    - name: Display password policy warning
      debug:
        msg: |
          ⚠️  WARNING: Password Policy Configuration ⚠️
          
          This playbook will modify password and user creation policies.
          Ensure you have:
          1. A working SSH key-based authentication method
          2. At least one user with a non-empty password
          3. Access to the console if authentication fails
          
          Changes include:
          - Password complexity requirements
          - Password aging policies
          - User creation defaults
          
          Proceeding in 10 seconds...
      
    - name: Wait for user acknowledgment
      pause:
        seconds: 10
        prompt: "Press Enter to continue or Ctrl+C to abort"
  
  vars:
    # Password policy settings - use config values with defaults
    password_minlen: "{{ authentication.password_policies.minlen | default(12) }}"
    password_minclass: "{{ authentication.password_policies.minclass | default(4) }}"
    password_maxrepeat: "{{ authentication.password_policies.maxrepeat | default(3) }}"
    password_maxsequence: "{{ authentication.password_policies.maxsequence | default(3) }}"
    password_maxclassrepeat: "{{ authentication.password_policies.maxclassrepeat | default(7) }}"
    password_gecoscheck: "{{ authentication.password_policies.gecoscheck | default('yes') | string }}"
    password_dictcheck: "{{ authentication.password_policies.dictcheck | default('yes') | string }}"
    password_usercheck: "{{ authentication.password_policies.usercheck | default('yes') | string }}"
    password_enforcing: "{{ authentication.password_policies.enforcing | default('yes') | string }}"
    password_retry: "{{ authentication.password_policies.retry | default(3) }}"
    password_difok: "{{ authentication.password_policies.difok | default(5) }}"
    password_ucredit: "{{ authentication.password_policies.ucredit | default(-1) }}"
    password_lcredit: "{{ authentication.password_policies.lcredit | default(-1) }}"
    password_dcredit: "{{ authentication.password_policies.dcredit | default(-1) }}"
    password_ocredit: "{{ authentication.password_policies.ocredit | default(-1) }}"
    password_minage: "{{ authentication.password_policies.minage | default(1) }}"
    password_maxage: "{{ authentication.password_policies.maxage | default(90) }}"
    password_warnage: "{{ authentication.password_policies.warnage | default(7) }}"
    password_inactive: "{{ (authentication.password_policies.inactive | default(30)) | string | trim }}"
    password_expire: "{{ authentication.password_policies.expire | default('yes') | string }}"
    
  tasks:
    - name: Create backup of current password configuration
      copy:
        src: "{{ item }}"
        dest: "{{ item }}.backup.{{ ansible_date_time.epoch }}"
        remote_src: yes
        backup: yes
      loop:
        - /etc/login.defs
        - /etc/default/useradd
      ignore_errors: yes

    - name: Create backup of pwquality.conf if it exists
      copy:
        src: /etc/security/pwquality.conf
        dest: /etc/security/pwquality.conf.backup.{{ ansible_date_time.epoch }}
        remote_src: yes
        backup: yes
      ignore_errors: yes

    - name: Install password quality tools
      apt:
        name:
          - libpam-pwquality
          - cracklib-runtime
          - libcrack2
          - libpam-modules
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Configure login.defs password policies
      template:
        src: OB-005-T_login.defs.j2
        dest: /etc/login.defs
        mode: '0644'
        backup: yes

    - name: Configure pwquality password requirements
      template:
        src: OB-006-T_pwquality.conf.j2
        dest: /etc/security/pwquality.conf
        mode: '0644'
        backup: yes

    - name: Create backup of current PAM configurations
      copy:
        src: "{{ item }}"
        dest: "{{ item }}.backup.{{ ansible_date_time.epoch }}"
        remote_src: yes
        backup: yes
      loop:
        - /etc/pam.d/common-password
        - /etc/pam.d/passwd
      ignore_errors: yes

    - name: Configure common-password with strict enforcement
      template:
        src: OB-006-T_common-password.j2
        dest: /etc/pam.d/common-password
        mode: '0644'
        backup: yes

    - name: Configure passwd with strict enforcement
      template:
        src: OB-006-T_passwd.j2
        dest: /etc/pam.d/passwd
        mode: '0644'
        backup: yes

    - name: Test PAM configuration
      shell: |
        # Test if PAM modules can be loaded
        if [ -f /usr/lib/x86_64-linux-gnu/security/pam_pwquality.so ]; then
          echo "✅ PAM pwquality module found"
        else
          echo "❌ PAM pwquality module not found"
          exit 1
        fi
        
        # Test PAM lastlog module (available in libpam-modules)
        if [ -f /usr/lib/x86_64-linux-gnu/security/pam_lastlog.so ]; then
          echo "✅ PAM lastlog module found"
        else
          echo "⚠️  PAM lastlog module not found"
        fi
        
        # Test PAM configuration syntax
        if [ -f /etc/pam.d/common-password ]; then
          echo "✅ PAM common-password configuration exists"
        else
          echo "❌ PAM common-password configuration missing"
          exit 1
        fi
      changed_when: false
      ignore_errors: yes

    - name: Configure useradd defaults
      template:
        src: OB-005-T_useradd.j2
        dest: /etc/default/useradd
        mode: '0644'
        backup: yes

    - name: Test useradd configuration
      shell: useradd --help
      register: useradd_test
      changed_when: false
      ignore_errors: yes

    - name: Get list of local users
      command: getent passwd
      register: passwd_entries

    - name: Set user list fact (only regular users, not system users)
      set_fact:
        user_list: >-
          {{ passwd_entries.stdout_lines | map('split', ':') | selectattr('6', 'in', ['/bin/bash','/bin/sh','/bin/zsh','/usr/bin/bash','/usr/bin/sh','/usr/bin/zsh']) | map('first') | list }}

    - name: Set password expiration for existing users
      shell: chage -M {{ password_maxage }} {{ item }}
      loop: "{{ user_list }}"
      ignore_errors: yes
      when: password_expire == "yes"

    - name: Set password warning for existing users
      shell: chage -W {{ password_warnage }} {{ item }}
      loop: "{{ user_list }}"
      ignore_errors: yes
      when: password_expire == "yes"

    - name: Set account inactivity for existing users
      shell: chage -I {{ password_inactive }} {{ item }}
      loop: "{{ user_list }}"
      ignore_errors: yes
      when: password_expire == "yes"

    - name: Create password policy enforcement script
      template:
        src: OB-005-T_enforce_password_policy.sh.j2
        dest: /usr/local/bin/enforce_password_policy.sh
        mode: '0755'
        backup: yes

    - name: Create password policy cron job
      cron:
        name: "Enforce password policies"
        hour: "2"
        minute: "0"
        job: "/usr/local/bin/enforce_password_policy.sh"
        user: root

    - name: Create script to reset password change date when root changes password
      template:
        src: OB-005-T_reset_password_date.sh.j2
        dest: /usr/local/bin/reset_password_date.sh
        mode: '0755'
        backup: yes

    - name: Create sudo rule to allow password date reset
      lineinfile:
        path: /etc/sudoers.d/password_reset
        line: "ALL ALL=(root) NOPASSWD: /usr/local/bin/reset_password_date.sh"
        create: yes
        mode: '0440'
        validate: 'visudo -cf %s'

    - name: Test useradd configuration syntax
      shell: |
        # Test if useradd can read the configuration
        useradd -D | grep -q "INACTIVE"
        echo "Useradd configuration test: PASSED"
      register: useradd_config_test
      changed_when: false
      ignore_errors: yes

    - name: Test user creation with new policies (create temporary user)
      shell: |
        # Create a temporary test user to verify policies work
        TEST_USER="test_policy_$$"
        useradd -m -s /bin/bash "$TEST_USER" 2>&1
        if [ $? -eq 0 ]; then
          echo "✅ User creation test: PASSED"
          # Clean up - delete the test user
          userdel -r "$TEST_USER" 2>/dev/null || true
        else
          echo "❌ User creation test: FAILED"
          exit 1
        fi
      register: useradd_policy_test
      changed_when: false
      ignore_errors: yes

    - name: Display password policy summary
      debug:
        msg: |
          === PASSWORD POLICY CONFIGURATION SUMMARY ===
          
          Password Requirements:
          - Minimum Length: {{ password_minlen }} characters
          - Minimum Character Classes: {{ password_minclass }}
          - Maximum Repeat: {{ password_maxrepeat }} characters
          - Maximum Sequence: {{ password_maxsequence }} characters
          - Dictionary Check: {{ password_dictcheck }}
          - User Check: {{ password_usercheck }}
          
          Character Requirements:
          - Uppercase Letters: {{ password_ucredit }}
          - Lowercase Letters: {{ password_lcredit }}
          - Digits: {{ password_dcredit }}
          - Special Characters: {{ password_ocredit }}
          
          Password Aging:
          - Minimum Age: {{ password_minage }} days
          - Maximum Age: {{ password_maxage }} days
          - Warning Age: {{ password_warnage }} days
          - Inactive Days: {{ password_inactive }} days
          - Password Expiration: {{ password_expire }}
          
          === SECURITY FEATURES ENABLED ===
          ✓ Strong password complexity requirements
          ✓ Password history enforcement
          ✓ Password aging policies
          ✓ Account inactivity controls
          ✓ Dictionary attack prevention
          ✓ User-specific password checks
          ✓ Automated policy enforcement
          ✓ Regular password audits
          ✓ PAM password quality enforcement
          ✓ PAM configuration with pwquality module
          
          === IMPORTANT NOTES ===
          ✓ User creation tested and validated
          ✓ Configuration backups created
          ✓ All settings applied safely
          ✓ PAM stack configured with pwquality
          
          === NEXT STEPS ===
          1. Test user creation with new policies
          2. Ensure all users have compliant passwords
          3. Monitor password change logs
          4. Review and adjust policy settings as needed

    - name: Set password_inactive with proper trimming
      set_fact:
        password_inactive: "{{ (authentication.password_policies.inactive | default(30)) | string | trim }}" 